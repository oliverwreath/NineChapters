package com.GoogleAPAC.RoundB;

import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.GoogleAPAC.RoundA.Util.getPrintWriter;

/**
 * Created by yanli on 8/28/2016.
 */
@Slf4j
public class GymSecrets {
    public static void main(String[] args) {
        long startTime = System.currentTimeMillis();
        GymSecrets();
        log.info("time taken = {}s", (System.currentTimeMillis() - startTime) / 1000.0);
    }

    public static BigInteger getModPow(BigInteger i, BigInteger A, BigInteger K, Map<BigInteger, BigInteger> iiModMap, Map<BigInteger, BigInteger> iiModPowMap) {
        BigInteger ii;
        if (iiModMap.containsKey(i)) {
            ii = iiModMap.get(i);
        } else {
            ii = i.mod(K);
            iiModMap.put(i, ii);
        }

        BigInteger iiModPow;
        if (iiModPowMap.containsKey(ii)) {
            iiModPow = iiModPowMap.get(ii);
        } else {
            iiModPow = ii.modPow(A, K);
            iiModPowMap.put(ii, iiModPow);
        }

        return iiModPow.add(BigInteger.ZERO);
    }

    public static void GymSecrets() {
        Scanner scanner = new Scanner(System.in);
        int numOfCases;
        if (scanner.hasNext()) {
            numOfCases = scanner.nextInt();
            PrintWriter printWriter = getPrintWriter("C:\\Users\\yanli\\IdeaProjects\\JiuZhang\\src\\main\\resources\\GymSecrets.out.txt");

            for (int caseI = 1; caseI <= numOfCases; caseI++) {
                BigInteger A = scanner.nextBigInteger();
                BigInteger B = scanner.nextBigInteger();
                long N = scanner.nextLong();
                long K = scanner.nextLong();
                long counter = 0;
//                Map<BigInteger, BigInteger> iiModMap = new HashMap<BigInteger, BigInteger>();
//                Map<BigInteger, BigInteger> jjModMap = new HashMap<BigInteger, BigInteger>();
                ArrayList<Long> iArray = new ArrayList<Long>(100000);
                long c = N / K;
                long residual = N % K;
                Collections.fill(iArray, c);
                for (int i = 0; i < residual; i++) {
                    iArray.add(i, 1L);
                }

                Map<BigInteger, BigInteger> iiModPowMap = new HashMap<BigInteger, BigInteger>();
                Map<BigInteger, BigInteger> jjModPowMap = new HashMap<BigInteger, BigInteger>();
                for (BigInteger i = BigInteger.ONE; i.compareTo(N) <= 0; i = i.add(BigInteger.ONE)) {
                    for (BigInteger j = BigInteger.ONE; j.compareTo(N) <= 0; j = j.add(BigInteger.ONE)) {

                    }
                }
                        if (i.compareTo(j) != 0) {
                            BigInteger iiModPow = getModPow(i, A, K, iiModMap, iiModPowMap);
                            BigInteger jjModPow = getModPow(j, B, K, jjModMap, jjModPowMap);

                            BigInteger tmp = (iiModPow.add(jjModPow));
                            if (tmp.mod(K).equals(BigInteger.ZERO)) {
//                            System.out.println(i + "_" + j + "; ");
                                counter++;
                                if (counter == 1000000007) {
                                    counter = 0;
                                }
                            }
                        }
                    }
                }

                String result = "Case #" + caseI + ": " + counter;
                System.out.println(result);
                printWriter.println(result);
            }

            printWriter.flush();
        }
    }
}
